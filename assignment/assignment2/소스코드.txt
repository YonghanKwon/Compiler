#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//stack
typedef struct element {
	int num;
	char str[100];
}element;

#define MAX_STACK_SIZE 1000

element stack[MAX_STACK_SIZE];
int top = -1;

int IsEmpty() {
	if (top < 0)
		return 1;
	else
		return 0;
}
int IsFull() {
	if (top >= MAX_STACK_SIZE - 1)
		return 1;
	else
		return 0;
}

void push(element value) {
	if (IsFull() == 1)
		printf("스택이 가득 찼습니다.");
	else
		stack[++top] = value;
}

element pop() {
	if (IsEmpty() == 1)
		printf("스택이 비었습니다.");
	else
		return stack[top--];
}

char keyword[][20] = {
	"if","else","while","class","return"
};
char digits[11] = "0123456789";
char digits_nonzero[10] = "123456789";
char alpha[53] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
char oper[5] = "+-*/";
char comparison[6][4] = { ">\n","<\n",">=\n","<=\n","==\n","!=\n" };
void tokenlize(char* input_t);
void classify(char* input_t);

void tokenlize(char* input_t);
void classify(char* input_t);
void get_terminal(char* input_t,int line,char* output);
void synt_analy(char* input_t);
void action(int state,char* next_terminal,char* act);
int go_to(int state,char* nonterminal);
void reduct(int num,char* ter);

int main(int argc,char * argv[]) {
	tokenlize(argv[1]);
	classify(argv[1]);
	remove("temp.txt");//input파일과 output파일 외에 임시로 작성한 파일을 삭제
	//lexical analyzer
	synt_analy(argv[1]);

	return 0;
}

void tokenlize(char* input_t) {
	FILE* input;
	FILE* output;
	char *input_s;
	char bp[1000];
	char temp[100] = "\0";
	char pre_tok[100]="\0";
	int tok_start = 0;
	int tok_end = 0;
	int tok_size = 0;
	int checker = 0;
	int equal_checker = 0;
	int dqm_checker = 0;//큰따옴표 체크
	int sqm_checker = 0;//작은따옴표 체크
	int line = 0;//몇째 줄인지 확인

	input = fopen(input_t, "rt");
	if (input == NULL) {
		printf("input파일을 열지 못하였습니다\n");
		return 1;
	}
	output = fopen("temp.txt", "wt");
	if (output == NULL) {
		printf("output파일을 열지 못하였습니다\n");
		return 1;
	}
	while (input_s = fgets(bp, 1000, input)) {
		line++;
		fprintf(output, "LINE %d\n", line);
		for (int i = 0; i < strlen(input_s); i++) {
			if ((dqm_checker==0||(dqm_checker == 1 && input_s[i] == '\"'))&& (sqm_checker == 0 || (sqm_checker == 1 && input_s[i] == '\''))) {
				char oper[3] = "\0";
				if (input_s[i] == '>' || input_s[i] == '<' || input_s[i] == '=' || input_s[i] == '!') {
					if (input_s[i + 1] == '=') {
						equal_checker = 1;
					}
				}
				if (input_s[i] == ' ' || input_s[i] == '\n' || input_s[i] == '\t' || input_s[i] == '{' || input_s[i] == '}' || input_s[i] == '(' || input_s[i] == ')' || input_s[i] == '\'' || input_s[i] == '\"' || input_s[i] == '\;' || input_s[i] == '\[' || input_s[i] == '\]' || input_s[i] == ',' || input_s[i] == '>' || input_s[i] == '<' || input_s[i] == '=' || input_s[i] == '+' || input_s[i] == '-' || input_s[i] == '*' || input_s[i] == '/' || equal_checker == 1)
				{
					equal_checker = 0;
					tok_size = tok_end - tok_start;
					tok_end++;
					tok_start++;
					if (tok_size) {
						tok_start--;
						memset(pre_tok, '\0',100 * sizeof(char));
						strcpy(pre_tok, temp);
						memset(temp, '\0',100*sizeof(char));
						strncpy(temp, input_s + tok_start, tok_size);
						tok_start = tok_end;
						fprintf(output, "%s\n", temp);
						checker = 1;
					}

					char sp;
					if (input_s[i] == '{')
					{
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "{");
						sp = '{';
						fprintf(output, "%c\n", sp);
						
					}
					else if (input_s[i] == '}') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "}");
						sp = '}';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '(') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "(");
						sp = '(';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == ')') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, ")");
						sp = ')';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '\'') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "\'");
						sqm_checker = (sqm_checker + 1) % 2;
						sp = '\'';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '\"') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "\"");
						dqm_checker = (dqm_checker + 1) % 2;
						sp = '\"';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '\;') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "\;");
						sp = '\;';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '[') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "[");
						sp = '[';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == ']') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "]");
						sp = ']';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == ',') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, ",");
						sp = ',';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '+') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "+");
						sp = '+';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '-') {
						if (strcmp(pre_tok, "=") == 0 || strcmp(pre_tok, "+") == 0 || strcmp(pre_tok, "-") == 0 || strcmp(pre_tok, "*") == 0 || strcmp(pre_tok, "/") == 0 || strcmp(pre_tok, "(") == 0 || strcmp(pre_tok, "return") == 0 || strcmp(pre_tok, ">=") == 0 || strcmp(pre_tok, "<=") == 0 || strcmp(pre_tok, ">") == 0 || strcmp(pre_tok, "<") == 0 || strcmp(pre_tok, "!=") == 0 || strcmp(pre_tok, "==") == 0 || strcmp(pre_tok, ",") == 0)
						{
							fprintf(output, "%c", '-');
						}
						else{
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, "-");
							sp = '-';
							fprintf(output, "%c\n", sp);
						}
					}
					else if (input_s[i] == '*') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "*");
						sp = '*';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '/') {
						memset(pre_tok, '\0', 100 * sizeof(char));
						strcpy(pre_tok, "/");
						sp = '/';
						fprintf(output, "%c\n", sp);
					}
					else if (input_s[i] == '>') {
						if (input_s[i + 1] == '=')
						{
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, ">=");
							char comp[3] = ">=";
							fprintf(output, "%s\n", comp);
							i++;
							tok_start++;
							tok_end++;
						}
						else {
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, ">");
							sp = '>';
							fprintf(output, "%c\n", sp);
						}
					}
					else if (input_s[i] == '<') {
						if (input_s[i + 1] == '=')
						{
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, "<=");
							char comp[3] = "<=";
							fprintf(output, "%s\n", comp);
							i++;
							tok_start++;
							tok_end++;

						}
						else {
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, "<");
							sp = '<';
							fprintf(output, "%c\n", sp);
						}
					}
					else if (input_s[i] == '=') {
						if (input_s[i + 1] == '=')
						{
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, "==");
							char comp[3] = "==";
							fprintf(output, "%s\n", comp);
							i++;
							tok_start++;
							tok_end++;
						}
						else {
							memset(pre_tok, '\0', 100 * sizeof(char));
							strcpy(pre_tok, "=");
							sp = '=';
							fprintf(output, "%c\n", sp);
						}
					}
					else if (input_s[i] == '!') {
					memset(pre_tok, '\0', 100 * sizeof(char));
					strcpy(pre_tok, "!=");
						char not_equal[3] = "!=";
						fprintf(output, "%s\n", not_equal);
						i++;
						tok_start++;
						tok_end++;

					}

				}
				else {
					tok_end++;
					if (checker != 0)
						checker = 0;
				}
			}
			else {
			tok_end++;
			}
		}
		tok_start = 0;
		tok_end = 0;
	}
	fclose(input);
	fclose(output);
}

void classify(char* input_t){
	FILE* input;
	FILE* output;
	char* input_s;
	char bp[100];

	char output_t[100]="\0";
	strncpy(output_t, input_t, strlen(input_t)-4);//.txt
	strcat(output_t, "_output.txt");

	int digit_checker = 0;
	int sQuatMark_checker = 0;
	int dQuatMark_checker = 0;
	int identifier_checker = 0;
	int line = 0;
	int brace_counter = 0;
	int paren_counter = 0;
	int squa_bracket_counter = 0;
	int string_checker = 0;
	int arithmetric_checker = 0;
	int compare_checker = 0;
	input= fopen("temp.txt", "rt");
	if (input == NULL) {
		printf("input파일을 열지 못하였습니다\n");
		return 1;
	}
	output = fopen(output_t, "wt");
	if (output == NULL) {
		printf("output파일을 열지 못하였습니다\n");
		return 1;
	}
	while (input_s = fgets(bp, 100, input)) {
		if (sQuatMark_checker == 0 && dQuatMark_checker == 0) {
			if (strstr(input_s, "LINE") != NULL) {//에러 검출시 몇째줄인지 체크하기 위해
				line++;
			}
			else {
				if (strcmp(input_s, "int\n") == 0)
				{
					fprintf(output, "INT\n");
				}
				else if (strcmp(input_s, "char\n") == 0)
				{
					fprintf(output, "CHAR\n");
				}
				else if (strcmp(input_s, "boolean\n") == 0)
				{
					fprintf(output, "BOOLEAN\n");
				}
				else if (strcmp(input_s, "string\n") == 0)
				{
					fprintf(output, "STRING\n");
				}
				else if (strcmp(input_s, "if\n") == 0)
				{
					fprintf(output, "IF\n");
				}
				else if (strcmp(input_s, "else\n") == 0)
				{
					fprintf(output, "ELSE\n");
				}
				else if (strcmp(input_s, "while\n") == 0)
				{
					fprintf(output, "WHILE\n");
				}
				else if (strcmp(input_s, "class\n") == 0)
				{
					fprintf(output, "CLASS\n");
				}
				else if (strcmp(input_s, "return\n") == 0)
				{
					fprintf(output, "RETURN\n");
				}
				else if (strcmp(input_s, "\;\n") == 0)
				{
					fprintf(output, "TERMINATING SYMBOL\n");
				}
				else if (strcmp(input_s, "(\n") == 0)
				{
					fprintf(output, "LPAREN\n");
					paren_counter++;
				}
				else if (strcmp(input_s, ")\n") == 0)
				{
					fprintf(output, "RPAREN\n");
					paren_counter--;
				}
				else if (strcmp(input_s, "{\n") == 0)
				{
					fprintf(output, "LBRACE\n");
					brace_counter++;
				}
				else if (strcmp(input_s, "}\n") == 0)
				{
					fprintf(output, "RBRACE\n");
					brace_counter--;
				}
				else if (strcmp(input_s, "[\n") == 0)
				{
					fprintf(output, "L SQUARE BRACKETS\n");
					squa_bracket_counter++;
				}
				else if (strcmp(input_s, "]\n") == 0)
				{
					fprintf(output, "R SQUARE BRACKETS\n");
					squa_bracket_counter--;
				}
				else if (strcmp(input_s, ",\n") == 0)
				{
					fprintf(output, "COMMA\n");
				}
				else if (strcmp(input_s, "true\n") == 0 || strcmp(input_s, "false\n") == 0)
				{
					fprintf(output, "BOOL STR\t%s", input_s);
				}
				else if (strcmp(input_s, "\'\n") == 0) {
					sQuatMark_checker = 1;
				}
				else if (strcmp(input_s, "\"\n") == 0) {
					dQuatMark_checker = 1;
				}
				else {
					arithmetric_checker = 0;
					compare_checker = 0;
					digit_checker = 0;
					identifier_checker = 0;
					for (int i = 0; i < 4; i++) {
						if (input_s[0] == oper[i] && input_s[1] == '\n') {
							fprintf(output, "ARITH OPER\t%s", input_s);
							arithmetric_checker = 1;
						}
					}
					
					for (int i = 0; i < 6; i++) {
						if (strcmp(input_s, comparison[i]) == 0) {
							fprintf(output, "COMP OPER\t%s", input_s);
							compare_checker = 1;
						}
					}
					if (input_s[0] == '=' && input_s[1] == '\n') {
						fprintf(output, "ASSIGN OPER\n");
					}
					else if ((input_s[0] == '-' && strchr(digits_nonzero, input_s[1]) != NULL) || strchr(digits, input_s[0]) != NULL) {//integer
						if (input_s[0] == '0' && input_s[1] == '\n') {
							digit_checker = 1;
						}
						else if (input_s[0] == '-' && strchr(digits_nonzero, input_s[1]) != NULL) {
							for (int i = 1; i < strlen(input_s) - 1; i++) {

								if (strchr(digits, input_s[i]) != NULL) {
									if (i == (strlen(input_s) - 2) && input_s[strlen(input_s) - 1] == '\n') {
										digit_checker = 1;
									}
								}
								else
								{
									digit_checker = 0;
									fclose(output);
									output = fopen(output_t, "wt");
									fprintf(output, "LINE %d \tNOT PERMITTED CHARACTER IN INTEGER", line);
									fclose(output);
									return;
									break;
								}
							}
						}
						else if (strchr(digits_nonzero, input_s[0]) != NULL) {
							for (int i = 0; i < strlen(input_s) - 1; i++) {
								if (strchr(digits, input_s[i]) != NULL) {

									if (i == (strlen(input_s) - 2) && input_s[strlen(input_s) - 1] == '\n') {
										digit_checker = 1;
									}
								}
								else
								{
									digit_checker = 0;
									fclose(output);
									output = fopen(output_t, "wt");
									fprintf(output, "LINE %d \tNOT PERMITTED CHARACTER IN INTEGER", line);
									fclose(output);
									return;
									break;
								}
							}
						}
						else {
							fclose(output);
							output = fopen(output_t, "wt");
							fprintf(output, "LINE %d \tIF THE FIRST NUMBER IS 0, THE ONLY PERMITTED INTEGER IS 0", line);
							fclose(output);
							return;
						}
						if (digit_checker == 1 && input_s[strlen(input_s) - 1] == '\n') {
							fprintf(output, "INTEGER\t%s", input_s);
						}
					}
					else if (input_s[0] == '_' || strchr(alpha, input_s[0]) != NULL) {//identifier
						for (int i = 0; i < strlen(input_s) - 1; i++) {
							if (strchr(digits, input_s[i]) != NULL || strchr(alpha, input_s[i]) != NULL || input_s[i] == '_') {
								if (i == strlen(input_s) - 2 && input_s[strlen(input_s) - 1] == '\n') {
									identifier_checker = 1;
								}
							}
							else {
								identifier_checker = 0;
								fclose(output);
								output = fopen(output_t, "wt");
								fprintf(output, "LINE %d \tNOT PERMITTED CHARACTER IN ID", line);
								fclose(output);
								return;
								break;
							}
						}
						if (identifier_checker == 1 && input_s[strlen(input_s) - 1] == '\n') {
							fprintf(output, "ID\t%s", input_s);
						}
					}
					else if(arithmetric_checker==0&&compare_checker==0) {
						fclose(output);
						output = fopen(output_t, "wt");
						fprintf(output, "LINE %d \tNOT PERMITTED CHARACTER. %s CAN NOT SPECIFICATE",line,input_s);
						fclose(output);
						return;
						break;
					}

				}
			}
		}
		
		else if (dQuatMark_checker == 1) {
			if (strcmp(input_s,"\"\n")==0) {
				dQuatMark_checker=0;
			}
			else {
				string_checker = 0;
				for (int i = 0; i < strlen(input_s) - 1; i++) {
					if (strchr(digits, input_s[i]) != NULL || strchr(alpha, input_s[i]) != NULL || input_s[i] == ' ' || input_s[i] == '\t') {
						if (i == strlen(input_s) - 2 && input_s[strlen(input_s) - 1] == '\n') {
							string_checker = 1;
						}
					}
					else {//literal string이 digits와 alphabet, blank로만 구성되기 때문
						string_checker = 0;
						fclose(output);
						output = fopen(output_t, "wt");
						fprintf(output, "LINE %d \tNOT PERMITTED CHARACTER IN LITERAL STRING", line);
						fclose(output);
						return;
						break;
					}
				}
		

				fprintf(output, "LITERALSTRING\t%s", input_s);
			}
		}
		else if (sQuatMark_checker == 1) {
			if (strcmp(input_s,"\'\n")==0) {
				sQuatMark_checker=0;
			}
			else {
				if(strlen(input_s)==2||input_s[0]=='\\')
					fprintf(output, "SINGLECHARACTER\t%s", input_s);
				else {
					fclose(output);
					output = fopen(output_t, "wt");
					fprintf(output,"LINE %d\tSINGLE CHARACTER SHOULD BE CONSIST OF THE ONLY CHARACTER",line);
					fclose(output);
					return;
				}
			}
		}
	}
	
	fclose(input);
	fclose(output);
	if (paren_counter != 0) {
		output = fopen(output_t, "wt");
		fprintf(output,"PAREN'S PAIR IS NOT MATCHED");
		fclose(output);
	}
	if (brace_counter != 0) {
		output = fopen(output_t, "wt");
		fprintf(output,"BRACE'S PAIR IS NOT MATCHED");
		fclose(output);
	}
	if (squa_bracket_counter != 0) {
		output = fopen(output_t, "wt");
		fprintf(output, "SQUARE BRACKET'S PAIR IS NOT MATCHED");
		fclose(output);
	}if (dQuatMark_checker != 0) {
		output = fopen(output_t, "wt");
		fprintf(output, "DOUBLE QUATES MARK IS NOT MATCHED");
		fclose(output);
	}if (sQuatMark_checker != 0) {
		output = fopen(output_t, "wt");
		fprintf(output, "SINGLE QUATES MARK IS NOT MATCHED");
		fclose(output);
	}
	return ;
}

void action(int state, char* next_terminal,char* act) {
	if (strcmp(next_terminal, "$") == 0, state == 1) {
		printf("accept!\n");
		exit(1);
	}
	if (strcmp(next_terminal,"class") == 0&&(state==0 ||state == 2 || state == 3 || state == 4)) {
		strcpy(act, "s05");
	}
	else if(strcmp(next_terminal, "vtype") == 0 && (state == 0 || state == 2 || state == 3 || state == 4 || state == 13 || state == 19 || state == 20)) {
		strcpy(act, "s06");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 5)) {
		strcpy(act, "s10");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 6)) {
		strcpy(act, "s11");
	}
	else if (strcmp(next_terminal, "lbrace") == 0 && (state == 10)) {
		strcpy(act, "s13");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 11 || state == 62)) {
		strcpy(act, "s14");
	}
	else if (strcmp(next_terminal, "lparen") == 0 && (state == 11)) {
		strcpy(act, "s15");
	}
	else if (strcmp(next_terminal, "assign") == 0 && (state == 11 ||state==54|| state == 62)) {
		strcpy(act, "s16");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 12)) {
		strcpy(act, "s17");
	}
	else if (strcmp(next_terminal, "vtype") == 0 && (state == 15)) {
		strcpy(act, "s22");
	}
	else if (strcmp(next_terminal, "literal") == 0 && (state == 16 || state == 57)) {
		strcpy(act, "s25");
	}
	else if (strcmp(next_terminal, "character") == 0 && (state == 16 || state == 57)) {
		strcpy(act, "s26");
	}
	else if (strcmp(next_terminal, "boolstr") == 0 && (state == 16 || state == 57)) {
		strcpy(act, "s27");
	}
	else if (strcmp(next_terminal, "lparen") == 0 && (state == 16 || state == 30 || state == 38 || state == 39 || state == 57)) {
		strcpy(act, "s30");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 16 || state == 30 || state == 38 || state == 39 || state == 57)) {
		strcpy(act, "s31");
	}else if (strcmp(next_terminal, "num") == 0 && (state == 16 || state == 30 || state == 38 || state == 39 || state == 57)) {
		strcpy(act, "s32");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 18)) {
		strcpy(act, "s33");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 21)) {
		strcpy(act, "s36");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 22)) {
		strcpy(act, "s37");
	}
	else if (strcmp(next_terminal, "addsub") == 0 && (state == 24)) {
		strcpy(act, "s38");
	}
	else if (strcmp(next_terminal, "multdiv") == 0 && (state == 28 || state == 44)) {
		strcpy(act, "s39");
	}
	else if (strcmp(next_terminal, "lbrace") == 0 && (state == 36)) {
		strcpy(act, "s41");
	}
	else if (strcmp(next_terminal, "comma") == 0 && (state == 37 || state == 63)) {
		strcpy(act, "s43");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 40)) {
		strcpy(act, "s46");
	}
	else if (strcmp(next_terminal, "if") == 0 && (state == 41 || state == 48 || state == 75 || state == 77 || state == 84)) {
		strcpy(act, "s51");
	}
	else if (strcmp(next_terminal, "while") == 0 && (state == 41 || state == 48 || state == 75 || state == 77 || state == 84)) {
		strcpy(act, "s52");
	}
	else if (strcmp(next_terminal, "vtype") == 0 && (state == 41 || state == 48 || state == 75 || state == 77 || state == 84)) {
		strcpy(act, "s53");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 41 || state == 48 || state == 75 || state == 77 || state == 84)) {
		strcpy(act, "s54");
	}
	else if (strcmp(next_terminal, "vtype") == 0 && (state == 43)) {
		strcpy(act, "s55");
	}
	else if (strcmp(next_terminal, "return") == 0 && (state == 47)) {
		strcpy(act, "s57");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 50)) {
		strcpy(act, "s59");
	}
	else if (strcmp(next_terminal, "lparen") == 0 && (state == 51)) {
		strcpy(act, "s60");
	}
	else if (strcmp(next_terminal, "lparen") == 0 && (state == 52)) {
		strcpy(act, "s61");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 53)) {
		strcpy(act, "s62");
	}
	else if (strcmp(next_terminal, "id") == 0 && (state == 55)) {
		strcpy(act, "s63");
	}
	else if(strcmp(next_terminal, "rbrace") == 0 && (state == 56)) {
	strcpy(act, "s64");
	}
	else if (strcmp(next_terminal, "boolstr") == 0 && (state == 60||state==61||state==73)) {
	strcpy(act, "s68");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 65)) {
	strcpy(act, "s71");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 66)) {
	strcpy(act, "s72");
	}
	else if (strcmp(next_terminal, "comp") == 0 && (state == 66||state==69)) {
	strcpy(act, "s73");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 69)) {
	strcpy(act, "s74");
	}
	else if (strcmp(next_terminal, "lbrace") == 0 && (state == 72)) {
	strcpy(act, "s75");
	}
	else if (strcmp(next_terminal, "lbrace") == 0 && (state == 74)) {
	strcpy(act, "s77");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 78)) {
	strcpy(act, "s80");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 79)) {
	strcpy(act, "s81");
	}
	else if (strcmp(next_terminal, "else") == 0 && (state == 80)) {
	strcpy(act, "s83");
	}
	else if (strcmp(next_terminal, "lbrace") == 0 && (state == 83)) {
	strcpy(act, "s84");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 85)) {
	strcpy(act, "s86");
	}
	else if (strcmp(next_terminal, "$") == 0 && (state == 7)) {
	strcpy(act, "r01");
	}
	else if (strcmp(next_terminal, "$") == 0 && (state == 8)) {
	strcpy(act, "r02");
	}
	else if (strcmp(next_terminal, "$") == 0 && (state == 9)) {
	strcpy(act, "r03");
	}
	else if (strcmp(next_terminal, "$") == 0 && (state == 0||state==2||state==3||state==4)) {
	strcpy(act, "r04");
	}
	else if ((strcmp(next_terminal, "vtype") == 0|| strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0|| strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0 || strcmp(next_terminal, "class") == 0 ||strcmp(next_terminal, "$") == 0) && (state == 14)) {
	strcpy(act, "r05");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0 || strcmp(next_terminal, "class") == 0 || strcmp(next_terminal, "$") == 0) && (state == 17)) {
	strcpy(act, "r06");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 23)) {
	strcpy(act, "r07");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 24)) {
	strcpy(act, "r08");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 25)) {
		strcpy(act, "r09");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 26)) {
	strcpy(act, "r10");
	}
	else if (strcmp(next_terminal, "semi") == 0 && (state == 27)) {
	strcpy(act, "r11");
	}
	else if ((strcmp(next_terminal, "semi") == 0|| strcmp(next_terminal, "addsub") == 0) && (state == 44)) {
	strcpy(act, "r12");
	}
	else if ((strcmp(next_terminal, "semi") == 0 || strcmp(next_terminal, "addsub") == 0) && (state == 28)) {
	strcpy(act, "r13");
	}
	else if ((strcmp(next_terminal, "semi") == 0 || strcmp(next_terminal, "addsub") == 0 || strcmp(next_terminal, "multdiv") == 0) && (state == 45)) {
	strcpy(act, "r14");
	}
	else if ((strcmp(next_terminal, "semi") == 0 || strcmp(next_terminal, "addsub") == 0 || strcmp(next_terminal, "multdiv") == 0) && (state == 29)) {
	strcpy(act, "r15");
	}
	else if ((strcmp(next_terminal, "semi") == 0 || strcmp(next_terminal, "addsub") == 0 || strcmp(next_terminal, "multdiv") == 0 || strcmp(next_terminal, "rparen") == 0) && (state == 46)) {
	strcpy(act, "r16");
	}
	else if ((strcmp(next_terminal, "semi") == 0 || strcmp(next_terminal, "addsub") == 0 || strcmp(next_terminal, "multdiv") == 0 || strcmp(next_terminal, "rparen") == 0) && (state == 31)) {
	strcpy(act, "r17");
	}
	else if ((strcmp(next_terminal, "semi") == 0 || strcmp(next_terminal, "addsub") == 0 || strcmp(next_terminal, "multdiv") == 0 || strcmp(next_terminal, "rparen") == 0) && (state == 32)) {
	strcpy(act, "r18");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "class") == 0||strcmp(next_terminal,"$")==0) && (state == 64)) {
	strcpy(act, "r19");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 42)) {
	strcpy(act, "r20");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 15)) {
	strcpy(act, "r21");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 70)) {
	strcpy(act, "r22");
	}
	else if (strcmp(next_terminal, "rparen") == 0 && (state == 37||state==63)) {
	strcpy(act, "r23");
	}
	else if ((strcmp(next_terminal, "rbrace") == 0|| strcmp(next_terminal, "return") == 0) && (state == 58)) {
	strcpy(act, "r24");
	}
	else if ((strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "return") == 0) && (state == 41|| state == 48|| state == 75|| state == 77|| state == 84)) {
	strcpy(act, "r25");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0) && (state == 49)) {
	strcpy(act, "r26");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0) && (state == 59)) {
	strcpy(act, "r27");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0) && (state == 82)) {
	strcpy(act, "r28");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0) && (state == 81)) {
	strcpy(act, "r29");
	}
	else if ((strcmp(next_terminal, "rparen") == 0|| strcmp(next_terminal, "comp") == 0) && (state == 76)) {
	strcpy(act, "r30");
	}
	else if ((strcmp(next_terminal, "rparen") == 0 || strcmp(next_terminal, "comp") == 0) && (state == 67)) {
	strcpy(act, "r31");
	}
	else if ((strcmp(next_terminal, "rparen") == 0 || strcmp(next_terminal, "comp") == 0) && (state == 68)) {
	strcpy(act, "r32");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0) && (state == 86)) {
	strcpy(act, "r33");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "id") == 0 || strcmp(next_terminal, "rbrace") == 0 || strcmp(next_terminal, "if") == 0 || strcmp(next_terminal, "while") == 0 || strcmp(next_terminal, "return") == 0) && (state == 80)) {
	strcpy(act, "r34");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 71)) {
	strcpy(act, "r35");
	}
	else if ((strcmp(next_terminal, "vtype") == 0 || strcmp(next_terminal, "class") == 0 || strcmp(next_terminal, "$") == 0) && (state == 33)) {
	strcpy(act, "r36");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 34)) {
	strcpy(act, "r37");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 35)) {
	strcpy(act, "r38");
	}
	else if (strcmp(next_terminal, "rbrace") == 0 && (state == 13 || state == 19 || state == 20)) {
	strcpy(act, "r39");
	}
	else {
		printf("reject!\n");
		exit(1);
	}
	
}

int go_to(int state, char* nonterminal) {
	if (state == 0) {
		if (strcmp(nonterminal, "CODE") == 0) {
			return 1;
		}
		else if (strcmp(nonterminal, "VDECL") == 0) {
			return 3;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 4;
		}
		else if (strcmp(nonterminal, "CDECL") == 0) {
			return 2;
		}
	}
	else if (state == 2) {
		if (strcmp(nonterminal, "CODE") == 0) {
			return 7;
		}
		else if (strcmp(nonterminal, "VDECL") == 0) {
			return 3;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 4;
		}
		else if (strcmp(nonterminal, "CDECL") == 0) {
			return 2;
		}
	}
	else if (state == 3) {
		if (strcmp(nonterminal, "CODE") == 0) {
			return 8;
		}
		else if (strcmp(nonterminal, "VDECL") == 0) {
			return 3;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 4;
		}
		else if (strcmp(nonterminal, "CDECL") == 0) {
			return 2;
		}
	}
	else if (state == 4) {
		if (strcmp(nonterminal, "CODE") == 0) {
			return 9;
		}
		else if (strcmp(nonterminal, "VDECL") == 0) {
			return 3;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 4;
		}
		else if (strcmp(nonterminal, "CDECL") == 0) {
			return 2;
		}
	}
	else if (state == 6) {
		if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 12;
		}
	}
	else if (state == 13) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 19;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 20;
		}
		else if (strcmp(nonterminal, "ODECL") == 0) {
			return 18;
		}
	}
	else if (state == 15) {
		if (strcmp(nonterminal, "ARG") == 0) {
			return 21;
		}
	}
	else if (state == 16) {
		if (strcmp(nonterminal, "RHS") == 0) {
			return 23;
		}
		else if (strcmp(nonterminal, "EXPRA") == 0) {
			return 24;
		}
		else if (strcmp(nonterminal, "EXPRB") == 0) {
			return 28;
		}
		else if (strcmp(nonterminal, "EXPRC") == 0) {
			return 29;
		}
	}
	else if (state == 19) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 19;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 20;
		}
		else if (strcmp(nonterminal, "ODECL") == 0) {
			return 35;
		}
	}
	else if (state == 20) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 19;
		}
		else if (strcmp(nonterminal, "FDECL") == 0) {
			return 20;
		}
		else if (strcmp(nonterminal, "ODECL") == 0) {
			return 35;
		}
	}
	else if (state == 30) {
		if (strcmp(nonterminal, "EXPRC") == 0) {
			return 40;
		}
	}
	else if (state == 37) {
		if (strcmp(nonterminal, "MOREARG") == 0) {
			return 42;
		}
	}
	else if (state == 38) {
		if (strcmp(nonterminal, "EXPRB") == 0) {
			return 44;
		}
		else if (strcmp(nonterminal, "EXPRC") == 0) {
			return 29;
		}
	}
	else if (state == 39) {
		if (strcmp(nonterminal, "EXPRC") == 0) {
			return 45;
		}
	}
	else if (state == 41) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 49;
		}
		else if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 50;
		}
		else if (strcmp(nonterminal, "BLOCK") == 0) {
			return 47;
		}
		else if (strcmp(nonterminal, "STMT") == 0) {
			return 48;
		}
	}
	else if (state == 47) {
		if (strcmp(nonterminal, "RETURN") == 0) {
			return 56;
		}
	}
	else if (state == 48) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 49;
		}
		else if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 50;
		}
		else if (strcmp(nonterminal, "BLOCK") == 0) {
			return 58;
		}
		else if (strcmp(nonterminal, "STMT") == 0) {
			return 48;
		}
	}
	else if (state == 53) {
		if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 12;
		}
	}
	else if (state == 57) {
		if (strcmp(nonterminal, "RHS") == 0) {
			return 65;
		}
		else if (strcmp(nonterminal, "EXPRA") == 0) {
			return 24;
		}
		else if (strcmp(nonterminal, "EXPRB") == 0) {
			return 28;
		}
		else if (strcmp(nonterminal, "EXPRC") == 0) {
			return 29;
		}
	}
	else if (state == 60) {
		if (strcmp(nonterminal, "CONDA") == 0) {
			return 66;
		}
		else if (strcmp(nonterminal, "CONDB") == 0) {
			return 67;
		}
	}
	else if (state == 61) {
		if (strcmp(nonterminal, "CONDA") == 0) {
			return 69;
		}
		else if (strcmp(nonterminal, "CONDB") == 0) {
			return 67;
		}
	}
	else if (state == 63) {
		if (strcmp(nonterminal, "MOREARG") == 0) {
			return 70;
		}
	}
	else if (state == 73) {
		if (strcmp(nonterminal, "CONDB") == 0) {
			return 76;
		}
	}
	else if (state == 75) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 49;
		}
		else if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 50;
		}
		else if (strcmp(nonterminal, "BLOCK") == 0) {
			return 78;
		}
		else if (strcmp(nonterminal, "STMT") == 0) {
			return 48;
		}
	}
	else if (state == 77) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 49;
		}
		else if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 50;
		}
		else if (strcmp(nonterminal, "BLOCK") == 0) {
			return 79;
		}
		else if (strcmp(nonterminal, "STMT") == 0) {
			return 48;
		}
	}
	else if (state == 80) {
		if (strcmp(nonterminal, "ELSE") == 0) {
			return 82;
		}
	}
	else if (state == 84) {
		if (strcmp(nonterminal, "VDECL") == 0) {
			return 49;
		}
		else if (strcmp(nonterminal, "ASSIGN") == 0) {
			return 50;
		}
		else if (strcmp(nonterminal, "BLOCK") == 0) {
			return 85;
		}
		else if (strcmp(nonterminal, "STMT") == 0) {
			return 48;
		}
	}
	
	printf("reject!\n");
	exit(1);
	
}

void reduct(int num,char* ter) {
	element a,cur;
	if (num == 4 || num == 21 || num == 23 || num == 25 || num == 34 || num == 39) {//0
		cur = pop();
		push(cur);
	}
	else if (num == 8 || num == 9 || num == 10 || num == 11 || num == 13 || num == 15 || num == 17 || num == 18 || num == 26|| num == 31 || num == 32 ) {//1
		pop();
		cur = pop();
		push(cur);
	}
	else if (num == 1 || num == 2 || num == 3 || num == 24 || num == 27 || num == 37 || num == 38) {//2
		for (int i = 0; i < 2; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}
	else if (num == 5 || num == 6 || num == 7 || num == 12 || num == 14 || num == 16 || num == 20 || num == 30 || num == 35) {//3
		for (int i = 0; i < 3; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}
	else if (num == 22 || num == 33) {//4
		for (int i = 0; i < 4; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}else if (num == 36) {//5
		for (int i = 0; i < 5; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}else if (num == 29) {//7
		for (int i = 0; i < 7; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}else if (num == 28) {//8
		for (int i = 0; i < 8; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}else if (num == 19) {//9
		for (int i = 0; i < 9; i++) {
			pop();
		}
		cur = pop();
		push(cur);
	}
	if (num == 1 || num == 2 || num == 3 || num == 4) {
		strcpy(a.str, "CODE");
	}
	else if (num == 5 || num == 6) {
		strcpy(a.str, "VDECL");
	}
	else if (num == 7) {
		strcpy(a.str, "ASSIGN");
	}
	else if (num == 8 || num == 9 || num == 10 || num == 11) {
		strcpy(a.str, "RHS");
	}
	else if (num == 12 || num == 13) {
		strcpy(a.str, "EXPRA");
	}
	else if (num == 14 || num == 15) {
		strcpy(a.str, "EXPRB");
	}
	else if (num == 16 || num == 17 ||num==18) {
		strcpy(a.str, "EXPRC");
	}else if (num == 19) {
		strcpy(a.str, "FDECL");
	}else if (num == 20 || num == 21) {
		strcpy(a.str, "ARG");
	}else if (num == 22 || num == 23) {
		strcpy(a.str, "MOREARG");
	}else if (num == 24 || num == 25) {
		strcpy(a.str, "BLOCK");
	}else if (num == 26 || num == 27 || num == 28 || num == 29) {
		strcpy(a.str, "STMT");
	}else if (num == 30 || num == 31) {
		strcpy(a.str, "CONDA");
	}else if (num == 32) {
		strcpy(a.str, "CONDB");
	}
	else if (num == 33 || num == 34) {
		strcpy(a.str, "ELSE");
	}else if (num == 35) {
		strcpy(a.str, "RETURN");
	}else if (num == 36) {
		strcpy(a.str, "CDECL");
	}else if (num == 37 || num == 38 || num == 39) {
		strcpy(a.str, "ODECL");
	}
	a.num = go_to(cur.num, a.str);
	push(a);

}

void synt_analy(char* input_t) {

	FILE* input;
	char* input_s;
	char bp[100];
	char temp;
	int cur_state = 0;
	char act[5]="s00";
	element a;
	char input_f[100] = "\0";
	char terminal[100];

	strncpy(input_f, input_t, strlen(input_t) - 4);//.txt
	strcat(input_f, "_output.txt");

	input = fopen(input_f, "rt");
	if (input == NULL) {
		printf("input파일을 열지 못하였습니다\n");
		return 1;
	}

	int line = 0;
	int count_line = 0;

	while (fscanf(input, "%c", &temp) != EOF) {
		if (temp == '\n') {
			count_line++;
		}
	}
	a.num = 0;
	push(a);
	get_terminal(input_t, line, terminal);
	line++;
	for (; line <= count_line; ) {
		
		
		a = pop();
		push(a);
		cur_state = a.num;
		action(cur_state, terminal, act);
		if (act[0] == 's') {
			if(line==count_line)
				strcpy(terminal, "$");
			else
				get_terminal(input_t, line, terminal);
			line++;
		}


		if (act[0] == 's') {
			cur_state = (act[1] - 48) * 10 + act[2] - 48;
			a.num = cur_state;
			strcpy(a.str, terminal);
			push(a);
		}
		else if (act[0] == 'r') {//reduction
			int red_num = 0;
			red_num = (act[1] - 48) * 10 + act[2] - 48;
			reduct(red_num,terminal);
			a = pop();
			push(a);
			action(a.num, terminal, act);
		}
	}while (top!=0) {
		action(a.num, terminal, act);

		if (act[0] == 's') {
			cur_state = (act[1] - 48) * 10 + act[2] - 48;
			a.num = cur_state;
			strcpy(a.str, terminal);
			push(a);
		}
		else if (act[0] == 'r') {//reduction
			int red_num = 0;
			red_num = (act[1] - 48) * 10 + act[2] - 48;
			reduct(red_num, terminal);
			a = pop();
			push(a);
			action(a.num, terminal, act);
		}
	}
	fclose(input);

	return;
}

void get_terminal(char* input_t, int line, char* output) {
	FILE* input;
	char* input_s;
	char bp[100];
	char state[100];
	int i = 0;

	char input_f[100] = "\0";
	strncpy(input_f, input_t, strlen(input_t) - 4);//.txt
	strcat(input_f, "_output.txt");

	input = fopen(input_f, "rt");
	if (input == NULL) {
		printf("input파일을 열지 못하였습니다\n");
		return 1;
	}

	while (input_s = fgets(bp, sizeof(bp), input)) {
		if (i > line) {
			break;
		}
		i++;

		if (strcmp(input_s, "INT\n") == 0|| strcmp(input_s, "CHAR\n") == 0|| strcmp(input_s, "STRING\n") == 0|| strcmp(input_s, "BOOLEAN\n") == 0) {
			strcpy(output, "vtype");
		}
		else if (strcmp(input_s, "TERMINATING SYMBOL\n") == 0) {
			strcpy(output, "semi");
		}
		else if (strcmp(input_s, "ASSIGN OPER\n") == 0) {
			strcpy(output, "assign");
		}
		else if (strcmp(input_s, "ARITH OPER\t+\n") == 0|| strcmp(input_s, "ARITH OPER\t-\n") == 0) {
			strcpy(output, "addsub");
		}
		else if (strcmp(input_s, "ARITH OPER\t*\n") == 0 || strcmp(input_s, "ARITH OPER\t/\n") == 0) {
			strcpy(output, "multdiv");
		}
		else if (strcmp(input_s, "LPAREN\n") == 0) {
			strcpy(output, "lparen");
		}
		else if (strcmp(input_s, "RPAREN\n") == 0) {
			strcpy(output, "rparen");
		}

		else if (strcmp(input_s, "LBRACE\n") == 0) {
			strcpy(output, "lbrace");
		}
		else if (strcmp(input_s, "RBRACE\n") == 0) {
			strcpy(output, "rbrace");
		}
		else if (strcmp(input_s, "COMMA\n") == 0) {
			strcpy(output, "comma");
		}
		else if (strcmp(input_s, "IF\n") == 0) {
			strcpy(output, "if");
		}
		else if (strcmp(input_s, "WHILE\n") == 0) {
			strcpy(output, "while");
		}

		else if (strcmp(input_s, "ELSE\n") == 0) {
			strcpy(output, "else");
		}
		else if (strcmp(input_s, "RETURN\n") == 0) {
			strcpy(output, "return");
		}
		else if (strcmp(input_s, "CLASS\n") == 0) {
			strcpy(output, "class");
		}

		else if (strstr(input_s, "ID\t") !=NULL) {
			strcpy(output, "id");
		}
		else if (strstr(input_s, "LITERALSTRING\t") != NULL) {
			strcpy(output, "literal");
		}
		else if (strstr(input_s, "SINGLECHARACTER\t") != NULL) {
			strcpy(output, "character");
		}
		else if (strstr(input_s, "BOOL STR\t") != NULL) {
			strcpy(output, "boolstr");
		}
		else if (strstr(input_s, "INTEGER\t") != NULL) {
			strcpy(output, "num");
		}
		else if (strstr(input_s, "COMP OPER\t") != NULL) {
			strcpy(output, "comp");
		}

	}

	fclose(input);
}